<?xml version="1.0" encoding="UTF-8"?>
<project name="name-of-project" default="build">

 <property name="toolsdir" value=""/>
 <!-- Uncomment the following when the tools are in ${basedir}/vendor/bin -->
 <!-- <property name="toolsdir" value="${basedir}/vendor/bin/"/> -->

 <property name="bindir" value="${basedir}/bin"/>
 <property name="srcdir" value="${basedir}/src"/>

 <target name="build" depends="prepare, composer, vendors-update, lint, setup, phploc-ci, pdepend, phpmd-ci, phpcs-ci, phpcpd-ci, phpunit, phpdox" description=""/>
 <target name="build-parallel" depends="prepare,lint,tools-parallel,phpunit,phpdox" description=""/>
 <target name="setup" depends="sf2-db-drop, sf2-db-create, sf2-schema-create, sf2-schema-validate, sf2-fixtures-load" />

 <target name="tools-parallel" description="Run tools in parallel">
  <parallel threadCount="2">
   <sequential>
    <antcall target="pdepend"/>
    <antcall target="phpmd-ci"/>
   </sequential>
   <antcall target="phpcpd-ci"/>
   <antcall target="phpcs-ci"/>
   <antcall target="phploc-ci"/>
  </parallel>
 </target>

 <target name="clean" unless="clean.done" description="Cleanup build artifacts">
  <delete dir="${bindir}/api"/>
  <delete dir="${bindir}/coverage"/>
  <delete dir="${bindir}/logs"/>
  <delete dir="${bindir}/pdepend"/>
  <delete dir="${bindir}/phpdox"/>
  <property name="clean.done" value="true"/>
 </target>

 <target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build">
  <mkdir dir="${bindir}/api"/>
  <mkdir dir="${bindir}/coverage"/>
  <mkdir dir="${bindir}/logs"/>
  <mkdir dir="${bindir}/pdepend"/>
  <mkdir dir="${bindir}/phpdox"/>
  <mkdir dir="${basedir}/web/uploads/images"/>
  <property name="prepare.done" value="true"/>
 </target>

 <target name="lint" description="Perform syntax check of sourcecode files">
  <apply executable="php" failonerror="true">
   <arg value="-l"/>

   <fileset dir="${srcdir}">
    <include name="**/*.php"/>
    <modified/>
   </fileset>

   <fileset dir="${basedir}/app">
    <include name="**/*.php"/>
    <modified/>
   </fileset>

  </apply>
 </target>

 <target name="phploc" description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
  <exec executable="${toolsdir}phploc">
   <arg value="--count-tests"/>
   <arg path="${srcdir}"/>
   <arg path="${basedir}/app"/>
  </exec>
 </target>

 <target name="phploc-ci" depends="prepare" description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${toolsdir}phploc">
   <arg value="--count-tests"/>
   <arg value="--log-csv"/>
   <arg path="${bindir}/logs/phploc.csv"/>
   <arg value="--log-xml"/>
   <arg path="${bindir}/logs/phploc.xml"/>
   <arg path="${srcdir}"/>
   <arg path="${basedir}/app"/>
  </exec>
 </target>

 <target name="pdepend" depends="prepare" description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${toolsdir}pdepend">
   <arg value="--jdepend-xml=${bindir}/logs/jdepend.xml"/>
   <arg value="--jdepend-chart=${bindir}/pdepend/dependencies.svg"/>
   <arg value="--overview-pyramid=${bindir}/pdepend/overview-pyramid.svg"/>
   <arg path="${srcdir},${basedir}/app"/>
  </exec>
 </target>

 <target name="phpmd" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${toolsdir}phpmd">
   <arg path="${srcdir}"/>
   <arg value="text"/>
   <arg value="cleancode,codesize,controversial,design,naming,unusedcode"/>
   <!--arg path="${bindir}/phpmd.xml"/-->
  </exec>
 </target>

 <target name="phpmd-ci" depends="prepare" description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${toolsdir}phpmd">
   <arg path="${srcdir}"/>
   <arg value="xml"/>
   <arg value="codesize,controversial,design,naming,unusedcode"/>
   <!--arg path="${bindir}/phpmd.xml"/-->
   <arg value="--reportfile"/>
   <arg path="${bindir}/logs/pmd.xml"/>
  </exec>
 </target>

 <target name="phpcs" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${toolsdir}phpcs">
   <arg value="--standard=Symfony2"/>
   <arg value="--extensions=php"/>
   <arg value="--ignore=autoload.php"/>
   <arg path="${srcdir}"/>
  </exec>
 </target>

 <target name="phpcs-ci" depends="prepare" description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${toolsdir}phpcs" output="/dev/null">
   <arg value="--report=checkstyle"/>
   <arg value="--report-file=${bindir}/logs/checkstyle.xml"/>
   <arg value="--standard=PSR2"/>
   <arg value="--extensions=php"/>
   <arg value="--ignore=autoload.php"/>
   <arg path="${srcdir}"/>
  </exec>
 </target>

 <target name="phpcpd" description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="${toolsdir}phpcpd">
   <arg path="${srcdir}"/>
  </exec>
 </target>

 <target name="phpcpd-ci" depends="prepare" description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
  <exec executable="${toolsdir}phpcpd">
   <arg value="--log-pmd"/>
   <arg path="${bindir}/logs/pmd-cpd.xml"/>
   <arg path="${srcdir}"/>
  </exec>
 </target>

 <target name="phpunit" depends="prepare" description="Run unit tests with PHPUnit">
  <exec executable="${toolsdir}phpunit" failonerror="true">
   <arg value="--configuration"/>
   <arg path="${basedir}/app/phpunit.xml"/>
  </exec>
 </target>

 <target name="phpdox" depends="phploc-ci,phpcs-ci,phpmd-ci" description="Generate project documentation using phpDox">
  <exec executable="${toolsdir}phpdox" dir="${bindir}">
   <arg value="-f" />
   <arg path="${basedir}/app/phpdox.xml" />
   <!--arg path="${srcdir}" /-->
  </exec>
 </target>

 <!-- Add vendors or code will fail -->
 <target name="-check-composer" unless="composer.exists">
  <available property="composer.exists" file="composer.phar"/>
 </target>

 <target name="composer" description="Download Composer" depends="-check-composer" ><!-- if="${composer.exists} != null" -->
  <exec executable="wget" failonerror="true">
   <arg value="-r" />
   <arg value="-nH" />
   <arg value="http://getcomposer.org/composer.phar" />
  </exec>
  <exec executable="chmod" failonerror="true">
    <arg value="+x" />
    <arg value="composer.phar" />
  </exec>
 </target>

 <target name="vendors-install" depends="clean" description="Add Vendors">
  <exec executable="composer.phar" failonerror="true">
   <arg value='install' />
  </exec>
 </target>

 <target name="vendors-update" depends="clean" description="Update Vendors">
  <exec executable="./composer.phar" failonerror="true">
   <arg value='update' />
  </exec>
 </target>

 <!-- Run any DB schema updates -->
 <target name="sf2-db-drop" depends="clean" description="Drop database">
  <exec executable="php" failonerror="true">
   <arg value='app/console' />
   <arg value="doctrine:database:drop" />
   <arg value='--force' />
  </exec>
  <!--delete>
   <fileset dir="${basedir}/web/uploads/images/" includes="**/*.*"/>
  </delete-->
 </target>

 <target name="sf2-db-create" depends="clean" description="Create database">
  <exec executable="php" failonerror="true">
   <arg value='app/console' />
   <arg value="doctrine:database:create" />
   <arg value='-n' />
  </exec>
 </target>

 <target name="sf2-schema-create" depends="clean" description="Create Schema">
  <exec executable="php" failonerror="true">
   <arg value='app/console' />
   <arg value="doctrine:schema:create" />
   <arg value='-n' />
  </exec>
 </target>

 <target name="sf2-schema-validate" depends="clean" description="Create Schema">
  <exec executable="php" failonerror="true">
   <arg value='app/console' />
   <arg value="doctrine:schema:validate" />
  </exec>
 </target>

 <target name="sf2-schema-update" depends="clean" description="Update Schema">
  <exec executable="php" failonerror="true">
   <arg value='app/console' />
   <arg value="doctrine:schema:update" />
   <arg value='-n' />
  </exec>
 </target>

<!-- Update fixtures-->
 <target name="sf2-fixtures-load" depends="clean" description="Update fixtures">
  <exec executable="php" failonerror="true">
   <arg value='app/console' />
   <arg value="doctrine:fixtures:load" />
   <arg value='-n' />
  </exec>
 </target>

</project>
